INT int
ID max
LPAREN (
INT int
ID a
COMMA ,
INT int
ID b
RPAREN )
LBRACE {
INT int
ID res
BECOMES =
NUM 0
SEMI ;
IF if
LPAREN (
ID a
GT >
ID b
RPAREN )
LBRACE {
ID res
BECOMES =
ID a
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID res
BECOMES =
ID b
SEMI ;
RBRACE }
RETURN return
ID res
SEMI ;
RBRACE }
INT int
ID tieBreak
LPAREN (
INT int
ID a
COMMA ,
INT int
ID b
RPAREN )
LBRACE {
INT int
ID c
BECOMES =
NUM 0
SEMI ;
INT int
ID d
BECOMES =
NUM 0
SEMI ;
INT int
ID res
BECOMES =
NUM 0
SEMI ;
IF if
LPAREN (
ID a
LT <
NUM 0
RPAREN )
LBRACE {
ID c
BECOMES =
NUM 0
MINUS -
ID a
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID c
BECOMES =
ID a
SEMI ;
RBRACE }
IF if
LPAREN (
ID b
LT <
NUM 0
RPAREN )
LBRACE {
ID d
BECOMES =
NUM 0
MINUS -
ID b
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID d
BECOMES =
ID b
SEMI ;
RBRACE }
IF if
LPAREN (
ID c
LT <
ID d
RPAREN )
LBRACE {
ID res
BECOMES =
ID a
SEMI ;
RBRACE }
ELSE else
LBRACE {
IF if
LPAREN (
ID c
EQ ==
ID d
RPAREN )
LBRACE {
IF if
LPAREN (
ID a
LT <
NUM 0
RPAREN )
LBRACE {
ID res
BECOMES =
ID a
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID res
BECOMES =
ID b
SEMI ;
RBRACE }
RBRACE }
ELSE else
LBRACE {
ID res
BECOMES =
ID b
SEMI ;
RBRACE }
RBRACE }
RETURN return
ID res
SEMI ;
RBRACE }
INT int
WAIN wain
LPAREN (
INT int
STAR *
ID begin
COMMA ,
INT int
ID size
RPAREN )
LBRACE {
INT int
ID res
BECOMES =
NUM 100000
SEMI ;
INT int
ID N
BECOMES =
NUM 500
SEMI ;
INT int
STAR *
ID cntArr
BECOMES =
NULL NULL
SEMI ;
INT int
ID offset
BECOMES =
NUM 241
SEMI ;
INT int
ID i
BECOMES =
NUM 0
SEMI ;
INT int
ID val
BECOMES =
NUM 0
SEMI ;
INT int
ID maxFreq
BECOMES =
NUM 0
SEMI ;
INT int
ID freq
BECOMES =
NUM 0
SEMI ;
ID cntArr
BECOMES =
NEW new
INT int
LBRACK [
ID N
RBRACK ]
SEMI ;
WHILE while
LPAREN (
ID i
LT <
ID N
RPAREN )
LBRACE {
STAR *
LPAREN (
ID cntArr
PLUS +
ID i
RPAREN )
BECOMES =
NUM 0
SEMI ;
ID i
BECOMES =
ID i
PLUS +
NUM 1
SEMI ;
RBRACE }
ID i
BECOMES =
NUM 0
SEMI ;
WHILE while
LPAREN (
ID i
LT <
ID size
RPAREN )
LBRACE {
ID val
BECOMES =
STAR *
LPAREN (
ID begin
PLUS +
ID i
RPAREN )
SEMI ;
ID val
BECOMES =
ID val
PLUS +
ID offset
SEMI ;
STAR *
LPAREN (
ID cntArr
PLUS +
ID val
RPAREN )
BECOMES =
STAR *
LPAREN (
ID cntArr
PLUS +
ID val
RPAREN )
PLUS +
NUM 1
SEMI ;
ID maxFreq
BECOMES =
ID max
LPAREN (
ID maxFreq
COMMA ,
STAR *
LPAREN (
ID cntArr
PLUS +
ID val
RPAREN )
RPAREN )
SEMI ;
ID i
BECOMES =
ID i
PLUS +
NUM 1
SEMI ;
RBRACE }
ID i
BECOMES =
NUM 0
SEMI ;
WHILE while
LPAREN (
ID i
LT <
ID N
RPAREN )
LBRACE {
ID freq
BECOMES =
STAR *
LPAREN (
ID cntArr
PLUS +
ID i
RPAREN )
SEMI ;
IF if
LPAREN (
ID freq
EQ ==
ID maxFreq
RPAREN )
LBRACE {
IF if
LPAREN (
ID res
EQ ==
NUM 100000
RPAREN )
LBRACE {
ID res
BECOMES =
ID i
MINUS -
ID offset
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID res
BECOMES =
ID tieBreak
LPAREN (
ID res
COMMA ,
ID i
MINUS -
ID offset
RPAREN )
SEMI ;
RBRACE }
RBRACE }
ELSE else
LBRACE {
RBRACE }
ID i
BECOMES =
ID i
PLUS +
NUM 1
SEMI ;
RBRACE }
RETURN return
ID res
SEMI ;
RBRACE }
