start BOF procedures EOF
BOF BOF
procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID g
LPAREN (
params .EMPTY
RPAREN )
LBRACE {
dcls .EMPTY
statements .EMPTY
RETURN return
expr term
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID f
LPAREN (
params paramlist
paramlist dcl COMMA paramlist
dcl type ID
type INT
INT int
ID a
COMMA ,
paramlist dcl
dcl type ID
type INT
INT int
ID b
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID t
BECOMES =
NUM 10
SEMI ;
dcl type ID
type INT
INT int
ID s
BECOMES =
NUM 21
SEMI ;
dcl type ID
type INT
INT int
ID g
BECOMES =
NUM 100
SEMI ;
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID g
BECOMES =
expr expr MINUS term
expr term
term factor
factor ID
ID s
MINUS -
term factor
factor ID
ID t
SEMI ;
RETURN return
expr term
term factor
factor ID
ID g
SEMI ;
RBRACE }
procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID max
LPAREN (
params paramlist
paramlist dcl COMMA paramlist
dcl type ID
type INT
INT int
ID a
COMMA ,
paramlist dcl
dcl type ID
type INT
INT int
ID b
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID answer
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr GT expr
expr term
term factor
factor ID
ID a
GT >
expr term
term factor
factor ID
ID b
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID answer
BECOMES =
expr term
term factor
factor ID
ID a
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID answer
BECOMES =
expr term
term factor
factor ID
ID b
SEMI ;
RBRACE }
RETURN return
expr term
term factor
factor ID
ID answer
SEMI ;
RBRACE }
procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID average
LPAREN (
params paramlist
paramlist dcl COMMA paramlist
dcl type ID
type INT
INT int
ID a
COMMA ,
paramlist dcl
dcl type ID
type INT
INT int
ID b
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID sum
BECOMES =
NUM 0
SEMI ;
dcl type ID
type INT
INT int
ID average
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID sum
BECOMES =
expr expr PLUS term
expr term
term factor
factor ID
ID a
PLUS +
term factor
factor ID
ID b
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID average
BECOMES =
expr term
term term SLASH factor
term factor
factor ID
ID sum
SLASH /
factor NUM
NUM 2
SEMI ;
RETURN return
expr term
term factor
factor ID
ID average
SEMI ;
RBRACE }
procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID max3
LPAREN (
params paramlist
paramlist dcl COMMA paramlist
dcl type ID
type INT
INT int
ID a
COMMA ,
paramlist dcl COMMA paramlist
dcl type ID
type INT
INT int
ID b
COMMA ,
paramlist dcl
dcl type ID
type INT
INT int
ID c
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID answer
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr GT expr
expr term
term factor
factor ID
ID a
GT >
expr term
term factor
factor ID
ID b
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr GT expr
expr term
term factor
factor ID
ID a
GT >
expr term
term factor
factor ID
ID c
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID answer
BECOMES =
expr term
term factor
factor ID
ID a
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID answer
BECOMES =
expr term
term factor
factor ID
ID c
SEMI ;
RBRACE }
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr GT expr
expr term
term factor
factor ID
ID b
GT >
expr term
term factor
factor ID
ID c
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID answer
BECOMES =
expr term
term factor
factor ID
ID b
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID answer
BECOMES =
expr term
term factor
factor ID
ID c
SEMI ;
RBRACE }
RBRACE }
RETURN return
expr term
term factor
factor ID
ID answer
SEMI ;
RBRACE }
procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID getlast
LPAREN (
params paramlist
paramlist dcl COMMA paramlist
dcl type ID
type INT STAR
INT int
STAR *
ID begin
COMMA ,
paramlist dcl
dcl type ID
type INT
INT int
ID size
RPAREN )
LBRACE {
dcls .EMPTY
statements .EMPTY
RETURN return
expr term
term factor
factor STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr expr MINUS term
expr expr PLUS term
expr term
term factor
factor ID
ID begin
PLUS +
term factor
factor ID
ID size
MINUS -
term factor
factor NUM
NUM 1
RPAREN )
SEMI ;
RBRACE }
procedures main
main INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
WAIN wain
LPAREN (
dcl type ID
type INT STAR
INT int
STAR *
ID begin
COMMA ,
dcl type ID
type INT
INT int
ID size
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NULL SEMI
dcls .EMPTY
dcl type ID
type INT STAR
INT int
STAR *
ID copy
BECOMES =
NULL NULL
SEMI ;
dcl type ID
type INT
INT int
ID i
BECOMES =
NUM 0
SEMI ;
dcl type ID
type INT
INT int
ID getlast
BECOMES =
NUM 10
SEMI ;
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID copy
BECOMES =
expr term
term factor
factor NEW INT LBRACK expr RBRACK
NEW new
INT int
LBRACK [
expr term
term factor
factor ID
ID size
RBRACK ]
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID i
BECOMES =
expr term
term factor
factor ID LPAREN arglist RPAREN
ID max
LPAREN (
arglist expr COMMA arglist
expr term
term factor
factor NUM
NUM 1
COMMA ,
arglist expr
expr term
term factor
factor NUM
NUM 1
RPAREN )
SEMI ;
statement PRINTLN LPAREN expr RPAREN SEMI
PRINTLN println
LPAREN (
expr term
term factor
factor STAR factor
STAR *
factor ID
ID copy
RPAREN )
SEMI ;
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr LT expr
expr term
term factor
factor ID
ID i
LT <
expr term
term factor
factor ID
ID size
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr expr PLUS term
expr term
term factor
factor ID
ID copy
PLUS +
term factor
factor ID
ID i
RPAREN )
BECOMES =
expr term
term factor
factor STAR factor
STAR *
factor LPAREN expr RPAREN
LPAREN (
expr expr PLUS term
expr term
term factor
factor ID
ID begin
PLUS +
term factor
factor ID
ID i
RPAREN )
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID i
BECOMES =
expr expr MINUS term
expr expr PLUS term
expr term
term factor
factor ID
ID i
PLUS +
term term PCT factor
term term SLASH factor
term term STAR factor
term factor
factor ID
ID i
STAR *
factor ID
ID i
SLASH /
factor ID
ID i
PCT %
factor ID
ID i
MINUS -
term factor
factor ID
ID i
SEMI ;
RBRACE }
statement DELETE LBRACK RBRACK expr SEMI
DELETE delete
LBRACK [
RBRACK ]
expr term
term factor
factor ID
ID copy
SEMI ;
RETURN return
expr term
term factor
factor NUM
NUM 0
SEMI ;
RBRACE }
EOF EOF
